#!/usr/bin/env python3

import rospy
import sys
import threading

from dynamic_reconfigure.server import Server

from tuw_nav_msgs.msg import Joints
from tuw_trinamic_controller.cfg import TrinamicTMCM1640DynamicConfig

from tuw_trinamic_controller.config.trinamic_TMCM_1640_config import TrinamicTMCM1640Config
from tuw_trinamic_controller.connection.connection_handler import ConnectionHandler
from tuw_trinamic_controller.connection.trinamic_TMCM_1640_connection import TrinamicTMCM1640Connection


class TrinamicControllerNode:

    def __init__(self, device, ports, baudrate):
        self._node_name = 'TRINAMIC_CONTROLLER_NODE'

        self._connection_type = None
        self._config_type = None
        self._reconfigure_type = None
        self._set_type(device=device)

        self._ports = ports
        self._baudrate = baudrate
        self._state_rate = None
        self._connection_handler = None
        self._reconfigure_server = None

        self._command_topic = 'trinamic_cmd'
        self._state_topic = 'trinamic_state'

        self._subscriber = None
        self._publisher = None

    def run(self):
        rospy.init_node(name=self._node_name)

        self._state_rate = rospy.Rate(hz=rospy.get_param(param_name='joint_state_hz', default=30))

        self._connection_handler = ConnectionHandler(
            connection_type=self._connection_type,
            config_type=self._config_type,
        )

        self._connection_handler.connect_devices(
            ports=self._ports,
            baudrate=self._baudrate
        )

        self._connection_handler.set_config_from_file(
            config_file_path=rospy.get_param(param_name='trinamic_config')
        )

        self._reconfigure_server = Server(
            type=self._reconfigure_type,
            callback=self._connection_handler.callback_reconfigure
        )

        self._subscriber = rospy.Subscriber(
            name=self._command_topic,
            data_class=Joints,
            callback=self.callback_command,
            queue_size=100
        )

        self._publisher = rospy.Publisher(
            name=self._state_topic,
            data_class=Joints,
            queue_size=100
        )

        state_thread = threading.Thread(target=self.state_publisher)
        state_thread.start()

        rospy.spin()

    def callback_command(self, command_message):
        self._connection_handler.callback_command(command_message=command_message)

    def state_publisher(self):
        while not rospy.is_shutdown():
            state_message = self._connection_handler.get_state_message()
            self._publisher.publish(state_message)
            self._state_rate.sleep()

    def _set_type(self, device):
        supported_devices = {
            'TMCM_1640': {'connection': TrinamicTMCM1640Connection,
                          'config': TrinamicTMCM1640Config,
                          'reconfigure': TrinamicTMCM1640DynamicConfig},
        }
        if device in supported_devices:
            self._connection_type = supported_devices[device]['connection']
            self._config_type = supported_devices[device]['config']
            self._reconfigure_type = supported_devices[device]['reconfigure']
        if device not in supported_devices:
            error_message = 'device {device_name} not supported'.format(device_name=device)
            rospy.logerr(error_message)
            rospy.logerr("SHUTTING DOWN...")
            rospy.sleep(10)
            rospy.signal_shutdown(error_message)


if __name__ == '__main__':
    try:
        arguments = rospy.myargv(argv=sys.argv)
        device_arg = arguments[1]
        ports_arg = arguments[2:-1]
        baudrate_arg = arguments[-1]
        trinamic_controller_node = TrinamicControllerNode(
            device=device_arg,
            ports=ports_arg,
            baudrate=baudrate_arg
        )
        trinamic_controller_node.run()
    except rospy.ROSInterruptException:
        rospy.logerr('ROS Interrupt Exception')
